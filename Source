#include <windows.h>
#include <iostream>
#include <string>
#include <fstream>
#include <time.h>
#include <conio.h>
#include <thread>
#include <stdio.h>
#include <dos.h>
#include <mmsystem.h>
#include <cstdlib>

using namespace std;

void TextColor(WORD color)
{
	HANDLE hConsoleOutput;
	hConsoleOutput = GetStdHandle(STD_OUTPUT_HANDLE);

	CONSOLE_SCREEN_BUFFER_INFO screen_buffer_info;
	GetConsoleScreenBufferInfo(hConsoleOutput, &screen_buffer_info);

	WORD wAttributes = screen_buffer_info.wAttributes;
	color &= 0x000f;
	wAttributes &= 0xfff0;
	wAttributes |= color;

	SetConsoleTextAttribute(hConsoleOutput, wAttributes);
}	

void FixConsoleWindow() {
	HWND consoleWindow = GetConsoleWindow();
	LONG style = GetWindowLong(consoleWindow, GWL_STYLE);
	style = style & ~(WS_MAXIMIZEBOX) & ~(WS_THICKFRAME);
	SetWindowLong(consoleWindow, GWL_STYLE, style);
}

void GotoXY(int x, int y) {
	COORD coord;
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

/*Hằng số*/
#define MAX_SIZE_SNAKE 18
#define MAX_SIZE_FOOD 2
#define MAX_SPEED 3
/*Biến toàn cục*/
POINT snake[18]; //Con rắn
POINT food[4]; // Thức ăn
int CHAR_LOCK;//Biến xác định hướng không thể di chuyển (Ở một thời điểm có một hướng rắn không thể di chuyển)
int MOVING;//Biến xác định hướng di chuyển của snake (Ở một thời điểm có ba hướng rắn có thể di chuyển)
int SPEED;// Có thể hiểu như level, level càng cao thì tốc độ càng nhanh
int HEIGH_CONSOLE, WIDTH_CONSOLE;// Độ rộng và độ cao của màn hình console
int FOOD_INDEX; // Chỉ số food hiện hành đang có trên màn hình
int SIZE_SNAKE; // Kích thước của snake, lúc đầu có 6 và tối đa lên tời 10
int STATE; // Trạng thái sống hay chết của rắn

bool IsValid(int x, int y)
{
	for (int i = 0; i < SIZE_SNAKE; i++) {
		if (snake[i].x == x && snake[i].y == y)
			return false;
	}
	return true;
}

void GenerateFood() {
	int x, y;
	srand((int)time(0));
	for (int i = 0; i < MAX_SIZE_FOOD; i++) {
		do {
			x = rand() % (WIDTH_CONSOLE - 1) + 1;
			y = rand() % (HEIGH_CONSOLE - 1) + 1;
		} while (IsValid(x, y) == false);
		food[i] = { x,y };
	}
}

void ResetData() {
	/*Khởi tạo các giá trị toàn cục*/
	CHAR_LOCK = 'A', MOVING = 'D', SPEED = 1; FOOD_INDEX = 0, WIDTH_CONSOLE = 70,
	HEIGH_CONSOLE = 20, SIZE_SNAKE = 6;
	/*Khởi tạo giá trị mặc định cho snake*/
	snake[0] = { 10, 5 }; snake[1] = { 11, 5 };
	snake[2] = { 12, 5 }; snake[3] = { 13, 5 };
	snake[4] = { 14, 5 }; snake[5] = { 15, 5 };
	GenerateFood();/*Tạo mảng thức ăn food*/
}

void DrawBoard(int x, int y, int width, int height, int curPosX = 0, int curPosY = 0){
	GotoXY(x, y); cout << '*';
	for (int i = 1; i < width; i++)cout << '*';
	cout << '*';
	GotoXY(x, height + y); cout << '*';
	for (int i = 1; i < width; i++)cout << '*';
	cout << '*';
	for (int i = y + 1; i < height + y; i++) {
		GotoXY(x, i); cout << '*';
		GotoXY(x + width, i); cout << '*';
	}
	GotoXY(curPosX, curPosY);
}

void DemNguocKhiBatDauGame()
{
	GotoXY(50, 10);
	cout<<"  ____  ";
	GotoXY(50, 11);
	cout<<" |___ \\ ";
	GotoXY(50, 12);
	cout<<"   __) |";
	GotoXY(50, 13);
	cout<<"  |__ < ";
	GotoXY(50, 14);
	cout<<"  ___) |";
	GotoXY(50, 15);
	cout<<" |____/ ";
	Sleep(1000);
	system("cls");

	GotoXY(50, 10);
	cout<<"  ___  ";
	GotoXY(50, 11);
	cout<<" |__ \\ ";
	GotoXY(50, 12);
	cout<<"    ) |";
	GotoXY(50, 13);
	cout<<"   / / ";
	GotoXY(50, 14);
	cout<<"  / /_ ";
	GotoXY(50, 15);
	cout<<" |____|";
	Sleep(1000);
	system("cls");

	GotoXY(50, 10);
	cout<<"  __ ";
	GotoXY(50, 11);
	cout<<" /_ |";
	GotoXY(50, 12);
	cout<<"  | |";
	GotoXY(50, 13);
	cout<<"  | |";
	GotoXY(50, 14);
	cout<<"  | |";
	GotoXY(50, 15);
	cout<<"  |_|";
	Sleep(1000);
	system("cls");
}
void StartGame() {
	system("cls");
	int _COMMAND;
	do
	{
		cout << "NOI DUNG CUA TRO CHOI" << endl;
		cout << "...." << endl;
		cout << "Nhan phim ENTER de bat dau tro choi" << endl;
		_COMMAND = toupper(_getch());
	} while (_COMMAND!=13);
	system("cls");
	DemNguocKhiBatDauGame();
	ResetData(); /* Khởi tạo dữ liệu gốc*/
	DrawBoard(0, 0, WIDTH_CONSOLE, HEIGH_CONSOLE); /* Vẽ màn hình game*/
	STATE = 1;/*Bắt đầu cho Thread chạy*/
}

/*Hàm thoát game*/
void ExitGame(HANDLE t) {
	system("cls");
	TerminateThread(t, 0);
}

/*Hàm dừng game*/
void PauseGame(HANDLE t) {
	SuspendThread(t);
}

/*Hàm cập nhật dữ liệu toàn cục*/
void Eat() {
	snake[SIZE_SNAKE] = food[FOOD_INDEX];
	if (FOOD_INDEX == MAX_SIZE_FOOD - 1)
	{
		FOOD_INDEX = 0;
		/*SIZE_SNAKE = 6;*/
		if (SPEED == MAX_SPEED)
		{
			STATE = 0;
			SPEED = 1;
			SIZE_SNAKE = 6;
		}
		else SPEED++;
		GenerateFood();
	}
	else {
		FOOD_INDEX++;
		SIZE_SNAKE++;
	}
}

/*Hàm xử lý khi đầu snake chạm vào thân snake*/
bool KiemTraDauRanChamVaoThanKhiQuaPhai()
{
	for (int i = 0; i < SIZE_SNAKE - 1; i++) {
		if (snake[SIZE_SNAKE - 1].x + 1 == snake[i].x + 1 && snake[SIZE_SNAKE - 1].y == snake[i].y)
			return false;
	}
	return true;
}

bool KiemTraDauRanChamVaoThanKhiQuaTrai()
{
	for (int i = 0; i < SIZE_SNAKE - 1; i++) {
		if (snake[SIZE_SNAKE - 1].x - 1 == snake[i].x - 1 && snake[SIZE_SNAKE - 1].y == snake[i].y)
			return false;
	}
	return true;
}

bool KiemTraDauRanChamVaoThanKhiXuongDuoi()
{
	for (int i = 0; i < SIZE_SNAKE - 1; i++) {
		if (snake[SIZE_SNAKE - 1].x == snake[i].x && snake[SIZE_SNAKE - 1].y + 1 == snake[i].y + 1)
			return false;
	}
	return true;
}

bool KiemTraDauRanChamVaoThanKhiLenTren()
{
	for (int i = 0; i < SIZE_SNAKE - 1; i++) {
		if (snake[SIZE_SNAKE - 1].x == snake[i].x && snake[SIZE_SNAKE - 1].y - 1 == snake[i].y - 1)
			return false;
	}
	return true;
}
/*Hàm xử lý khi snake chết*/
void ProcessDead() {
	STATE = 0;
	GotoXY(0, HEIGH_CONSOLE + 2);
	printf("Dead, type y to continue or anykey to exit");
}

/*Hàm vẽ màn hình*/
void DrawSnakeAndFood(const char* str) {
	GotoXY(food[FOOD_INDEX].x, food[FOOD_INDEX].y);
	printf("*");
	/*Vẽ đầu snake
	GotoXY(snake[SIZE_SNAKE - 1].x, snake[SIZE_SNAKE - 1].y);
	printf("^");*/
	for (int i = 0; i < SIZE_SNAKE; i++) {
		GotoXY(snake[i].x, snake[i].y);
		printf(str);
	}		 
}

void MoveRight() {
	int temp = KiemTraDauRanChamVaoThanKhiQuaPhai();
	if (snake[SIZE_SNAKE - 1].x + 1 == WIDTH_CONSOLE || temp == false) {
		ProcessDead();
	}
	else {
		if (snake[SIZE_SNAKE - 1].x + 1 == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y == food[FOOD_INDEX].y) {
			Eat();
		}
		for (int i = 0; i < SIZE_SNAKE - 1; i++) {
			snake[i].x = snake[i + 1].x;
			snake[i].y = snake[i + 1].y;
		}
		snake[SIZE_SNAKE - 1].x++;
	}
}
void MoveLeft() {
	int temp = KiemTraDauRanChamVaoThanKhiQuaTrai();
	if (snake[SIZE_SNAKE - 1].x - 1 == 0 || temp == false) {
		ProcessDead();
	}
	else {
		if (snake[SIZE_SNAKE - 1].x - 1 == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y == food[FOOD_INDEX].y) {
			Eat();
		}
		for (int i = 0; i < SIZE_SNAKE - 1; i++) {
			snake[i].x = snake[i + 1].x;
			snake[i].y = snake[i + 1].y;
		}
		snake[SIZE_SNAKE - 1].x--;
	}
}
void MoveDown() {
	int temp = KiemTraDauRanChamVaoThanKhiXuongDuoi();
	if (snake[SIZE_SNAKE - 1].y + 1 == HEIGH_CONSOLE || temp == false) {
		ProcessDead();
	}
	else {
		if (snake[SIZE_SNAKE - 1].x == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y + 1 == food[FOOD_INDEX].y) {
			Eat();
		}
		for (int i = 0; i < SIZE_SNAKE - 1; i++) {
			snake[i].x = snake[i + 1].x;
			snake[i].y = snake[i + 1].y;
		}
		snake[SIZE_SNAKE - 1].y++;
	}
}
void MoveUp() {
	int temp = KiemTraDauRanChamVaoThanKhiLenTren();
	if (snake[SIZE_SNAKE - 1].y - 1 == 0 || temp == false) {
		ProcessDead();
	}
	else {
		if (snake[SIZE_SNAKE - 1].x == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y - 1 == food[FOOD_INDEX].y) {
			Eat();
		}
		for (int i = 0; i < SIZE_SNAKE - 1; i++) {
			snake[i].x = snake[i + 1].x;
			snake[i].y = snake[i + 1].y;
		}
		snake[SIZE_SNAKE - 1].y--;
	}
}

/*Thủ tục cho thread*/
void ThreadFunc() {
	while (1) {
		if (STATE == 1) {/*Nếu vẫn còn snake vẫn còn sống*/
			DrawSnakeAndFood(" ");
			switch (MOVING) {
			case 'A':
				MoveLeft();
				break;
			case 'D':
				MoveRight();
				break;
			case 'W':
				MoveUp();;
				break;
			case 'S':
				MoveDown();
				break;
			}
			DrawSnakeAndFood("O");
			Sleep(400 / SPEED);/*Hàm ngủ theo tốc độ SPEEED, sua lai cho nay`*/
		}
	}
}


/*Hằng số
#define MAX_SIZE_SNAKE 18
#define MAX_SIZE_FOOD 2
#define MAX_SPEED 3
Biến toàn cục
POINT snake[18]; //Con rắn
POINT food[4]; // Thức ăn
int CHAR_LOCK;//Biến xác định hướng không thể di chuyển (Ở một thời điểm có một hướng rắn không thể di chuyển)
int MOVING;//Biến xác định hướng di chuyển của snake (Ở một thời điểm có ba hướng rắn có thể di chuyển)
int SPEED;// Có thể hiểu như level, level càng cao thì tốc độ càng nhanh
int HEIGH_CONSOLE, WIDTH_CONSOLE;// Độ rộng và độ cao của màn hình console
int FOOD_INDEX; // Chỉ số food hiện hành đang có trên màn hình
int SIZE_SNAKE; // Kích thước của snake, lúc đầu có 6 và tối đa lên tời 10
int STATE; // Trạng thái sống hay chết của rắn*/
void Savefile(HANDLE t)
{
	PauseGame(t);
	string s = ".txt";
	ofstream fout;
	string name;
	GotoXY(75, 3);
	cout << "Nhap ten file can luu: ";
	/*cin.ignore();*/
	getline(cin, name);
	name = name + s;
	fout.open(name);

	for (int i = 0; i < SIZE_SNAKE; i++)
		fout << snake[i].x << ' ' << snake[i].y << endl;
	for (int i = 0; i < FOOD_INDEX; i++)
		fout << food[i].x << ' ' << food[i].y << endl;
	fout << CHAR_LOCK << endl;
	fout << MOVING << endl;
	fout << FOOD_INDEX << endl;
	fout << SIZE_SNAKE << endl;
	fout << STATE;
	fout.close();
}
void Loadfile(HANDLE t)
{
	PauseGame(t);
	string s = ".txt";
	ifstream fin;
	string name;
	GotoXY(75, 5);
	cout << "Nhap ten file can tai: ";
	/*cin.ignore();*/
	getline(cin, name);
	name = name + s;
	fin.open(name);
	for (int i = 0; i < SIZE_SNAKE; i++)
		fin >> snake[i].x >> snake[i].y;
	for (int i = 0; i < FOOD_INDEX; i++)
		fin >> food[i].x >> food[i].y;
	fin >> CHAR_LOCK;
	fin >> MOVING;
	fin >> FOOD_INDEX;
	fin >> SIZE_SNAKE;
	fin >> STATE;
	fin.close();
	system("cls");
	WIDTH_CONSOLE = 70;
	HEIGH_CONSOLE = 20;
	DrawBoard(0, 0, WIDTH_CONSOLE, HEIGH_CONSOLE);
}

int Menu()
{
	GotoXY(30, 2);
	TextColor(10);
	cout<<"~~~~~~~~~~~~~~~~~~> Game ConSole <~~~~~~~~~~~~~~~~~~\n";
	Sleep(100);
	GotoXY(21, 4);
	TextColor(11);
	cout<<"      ___           ___           ___           ___           ___     ";
	GotoXY(21, 5);
	Sleep(100);
	cout<<"     /  /\\         /__/\\         /  /\\         /__/|         /  /\\    ";
	GotoXY(21, 6);
	Sleep(100);
	cout<<"    /  /:/_        \\  \\:\\       /  /::\\       |  |:|        /  /:/_   ";
	GotoXY(21, 7);
	Sleep(100);
	cout<<"   /  /:/ /\\        \\  \\:\\     /  /:/\\:\\      |  |:|       /  /:/ /\\  ";
	GotoXY(21, 8);
	Sleep(100);
	cout<<"  /  /:/ /::\\   _____\\__\\:\\   /  /:/~/::\\   __|  |:|      /  /:/ /:/_ ";
	GotoXY(21, 9);
	Sleep(100);
	cout<<" /__/:/ /:/\\:\\ /__/::::::::\\ /__/:/ /:/\\:\\ /__/\\_|:|____ /__/:/ /:/ /\\";
	GotoXY(21, 10);
	Sleep(100);
	cout<<" \\  \\:\\/:/~/:/ \\  \\:\\~~\\~~\\/ \\  \\:\\/:/__\\/ \\  \\:\\/:::::/ \\  \\:\\/:/ /:/";
	GotoXY(21, 11);
	Sleep(100);
	cout<<"  \\  \\::/ /:/   \\  \\:\\  ~~~   \\  \\::/       \\  \\::/~~~~   \\  \\::/ /:/ ";
	GotoXY(21, 12);
	Sleep(100);
	cout<<"   \\__\\/ /:/     \\  \\:\\        \\  \\:\\        \\  \\:\\        \\  \\:\\/:/  ";
	GotoXY(21, 13);
	Sleep(100);
	cout<<"     /__/:/       \\  \\:\\        \\  \\:\\        \\  \\:\\        \\  \\::/   ";
	GotoXY(21, 14);
	Sleep(100); 
	cout<<"     \\__\\/         \\__\\/         \\__\\/         \\__\\/         \\__\\/    ";
	GotoXY(51, 18);
	Sleep(100);
	cout<<"NEW GAME(N)";
	GotoXY(51, 19);
	Sleep(100);
	cout<<"LOAD GAME(L)";
	GotoXY(51, 20);
	Sleep(100);
	cout<<"EXIT GAME(E)";

	int temp;
	int _COMMAND;
	do {
		_COMMAND = toupper(_getch());
		if (_COMMAND == 'N' || _COMMAND == 'n')
			temp = 1;
		else if (_COMMAND == 'L' || _COMMAND == 'l')
			temp = 2;
		else if (_COMMAND == 'E' || _COMMAND == 'e')
			temp = 3;
	} while (_COMMAND != 'N' && _COMMAND != 'n' && _COMMAND != 'L' && _COMMAND != 'l' && _COMMAND != 'E' && _COMMAND != 'e');
	return temp;
}

/*Hàm main*/
void main() {
	thread t1(ThreadFunc); /*Tao thread cho snake*/
	HANDLE handle_t1 = t1.native_handle(); /*Lay handle cua thread*/
	int temp;
	FixConsoleWindow();
	int a = Menu();
	if (a == 1)
		StartGame();
	else if (a == 2)
	{
		system("cls");
		Loadfile(handle_t1);
	}
	else if (a == 3)
	{
		ExitGame(handle_t1);
		exit(0);
		return;
	}
	while (1) {
		temp = toupper(_getch());
		if (STATE == 1) {
			if (temp == 'P') {
				PauseGame(handle_t1);
			}
			else if (temp == 27) {
				ExitGame(handle_t1);
				exit(0);
				return;
			}
			else if (temp == 'L')
			{
				Savefile(handle_t1);
			}
			else if (temp == 'T')
			{
				Loadfile(handle_t1);
			}
			else {
				ResumeThread(handle_t1);
				if ((temp != CHAR_LOCK) && (temp == 'D' || temp == 'A' || temp ==
					'W' || temp == 'S'))
					{
					if (temp == 'D') CHAR_LOCK = 'A';
					else if (temp == 'W') CHAR_LOCK = 'S';
					else if (temp == 'S') CHAR_LOCK = 'W';
					else CHAR_LOCK = 'D';
					MOVING = temp;
					}
			}
		}
		else {
			if (temp == 'Y') StartGame();
			else {
				ExitGame(handle_t1);
				exit(0);
				return;
			}
		}
	}
}
